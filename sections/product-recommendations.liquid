{% assign margin = section.settings.margin | split: ',' %}
{% assign margin_top = margin[0] %}
{% assign margin_bottom = margin[1] %} 
{% assign padding = section.settings.padding | split: ',' %}
{% assign padding_top = padding[0] %}
{% assign padding_bottom = padding[1] %} 

{%- assign mode = section.settings.mode | default: 'recommendations' -%}
{%- assign prod_limit = section.settings.products_limit | default: 4 -%}
{%- assign chosen_collection = section.settings.collection -%}
{%- assign fallback_collection = section.settings.fallback_collection -%}

<div class="{% render 'container-settings' %}" id="product-recs-host-{{ section.id }}" data-mode="{{ mode }}">
  {% if section.settings.heading != blank %}
    <h3 class="section-header__title {{ section.settings.heading_position }}">{{ section.settings.heading }}</h3>
  {% endif %}

  <div class="row">
    <div
      class="product-recommendations"
      id="product-recommendations-{{ section.id }}"
      data-product-id="{{ product.id }}"
      data-section-id="{{ section.id }}"
      data-limit="{{ prod_limit | escape }}"
    >
      <div class="recs-skeleton" aria-hidden="true" style="display:flex;gap:12px;">
        {% for i in (1..4) %}<div style="height:180px;flex:1;background:#f3f3f3;border-radius:12px;"></div>{% endfor %}
      </div>

      {%- comment -%} Immediate server render if explicit collection mode {%- endcomment -%}
      {% if mode == 'collection' %}
        {% render 'recs-grid-inner', products: chosen_collection.products, limit: prod_limit, section_id: section.id %}
      {% endif %}
    </div>
  </div>
</div>

<style>
  .dT_VProdRecommendations{ margin-top:40px; }
  @media (min-width:1200px){
    #shopify-section-{{ section.id }}{
      margin-top:{{ margin_top }}px; margin-bottom:{{ margin_bottom }}px;
      padding-top:{{ padding_top }}px; padding-bottom:{{ padding_bottom }}px;
    }
  }
  @media (max-width:1199px){
    #shopify-section-{{ section.id }}{
      margin-top:{{ margin_top | divided_by: 2 }}px; margin-bottom:{{ margin_bottom | divided_by: 2 }}px;
      padding-top:{{ padding_top | divided_by: 2 }}px; padding-bottom:{{ padding_bottom | divided_by: 2 }}px;
    }
  }
  #shopify-section-{{ section.id }} .swiper-wrapper{ list-style:none; margin:0; padding:0; }
  #shopify-section-{{ section.id }} .recs-empty{ text-align:center; padding:16px 0; opacity:.7; }
  /* Fallback grid if Swiper is not available */
  #shopify-section-{{ section.id }} .no-swiper{ display:grid; grid-template-columns:repeat(4,1fr); gap:16px; }
  @media (max-width:1279px){ #shopify-section-{{ section.id }} .no-swiper{ grid-template-columns:repeat(3,1fr);} }
  @media (max-width:767px){ #shopify-section-{{ section.id }} .no-swiper{ grid-template-columns:repeat(2,1fr);} }
  @media (max-width:479px){ #shopify-section-{{ section.id }} .no-swiper{ grid-template-columns:1fr;} }
</style>

<script>
(function(){
  var hostSel = '#product-recommendations-{{ section.id }}';
  var mode = '{{ mode }}';
  var hasSwiper = typeof window.Swiper === 'function';

  function initSwiper(scope){
    if (!hasSwiper) {
      // Convert markup to fallback grid if no swiper present
      var wrap = scope.querySelector('.swiper-wrapper');
      if (wrap) {
        wrap.classList.remove('swiper-wrapper');
        wrap.classList.add('no-swiper');
        wrap.querySelectorAll('.swiper-slide').forEach(function(li){ li.classList.remove('swiper-slide'); });
      }
      var container = scope.querySelector('.swiper-container');
      if (container) container.classList.remove('swiper-container');
      var navs = scope.querySelectorAll('.swiper-button-prev, .swiper-button-next');
      navs.forEach(function(n){ n.parentNode && n.parentNode.removeChild(n); });
      return;
    }

    var container = scope.querySelector('.swiper-container');
    var nextBtn = scope.querySelector('.swiper-button-next');
    var prevBtn = scope.querySelector('.swiper-button-prev');
    if (!container) return;

    // eslint-disable-next-line no-new
    new Swiper(container, {
      slidesPerView: 4,
      loop: true,
      grabCursor: true,
      watchOverflow: true,
      observer: true,
      observeParents: true,
      navigation: nextBtn && prevBtn ? { nextEl: nextBtn, prevEl: prevBtn } : undefined,
      breakpoints: {
        0:    { slidesPerView: 1 },
        480:  { slidesPerView: 2 },
        768:  { slidesPerView: 3 },
        1024: { slidesPerView: 3 },
        1280: { slidesPerView: 4 }
      }
    });
  }

  function renderFallbackCollection(scope){
    // If a fallback collection was chosen, the server provided markup below under #recs-fallback
    var fb = document.getElementById('recs-fallback-{{ section.id }}');
    if (fb && fb.innerHTML.trim()) {
      scope.innerHTML = fb.innerHTML;
      initSwiper(scope);
      return true;
    }
    return false;
  }

  function loadRecs(){
    var host = document.querySelector(hostSel);
    if (!host) return;

    // If Collection mode, server already rendered it; just init UI.
    if (mode === 'collection') {
      initSwiper(host);
      return;
    }

    // Recommendations mode
    var productId = host.getAttribute('data-product-id');
    var sectionId = host.getAttribute('data-section-id');
    var limit = host.getAttribute('data-limit') || 4;

    // No product context (e.g., home/collection/page) → show fallback collection if set
    if (!productId) {
      if (!renderFallbackCollection(host)) {
        host.innerHTML = '<p class="recs-empty">No product context. Pick a fallback collection in the section settings.</p>';
      }
      return;
    }

    var url = '{{ routes.product_recommendations_url }}'
      + '?section_id=' + encodeURIComponent(sectionId)
      + '&product_id=' + encodeURIComponent(productId)
      + '&limit=' + encodeURIComponent(limit);

    fetch(url)
      .then(function(r){ return r.text(); })
      .then(function(html){
        var tmp = document.createElement('div');
        tmp.innerHTML = html;

        var inner = tmp.querySelector('#recs-inner');
        if (!inner || !inner.innerHTML.trim()) {
          // Nothing from API → try fallback collection
          if (!renderFallbackCollection(host)) {
            host.innerHTML = '<p class="recs-empty">No recommendations found for this product.</p>';
          }
          return;
        }

        host.innerHTML = inner.innerHTML;
        initSwiper(host);
      })
      .catch(function(){
        if (!renderFallbackCollection(host)) {
          host.innerHTML = '<p class="recs-empty">Couldn’t load recommendations right now.</p>';
        }
      });
  }

  document.addEventListener('shopify:section:load', function(e){
    try { if (e && e.detail && e.detail.sectionId === '{{ section.id }}') loadRecs(); } catch(_e){}
  });

  setTimeout(loadRecs, 120);
})();
</script>

{%- comment -%}
  Server-rendered block for recommendations endpoint.
  This is only populated when Shopify calls /recommendations/products?... 
{%- endcomment -%}
<div id="recs-inner">
  {%- if mode == 'recommendations' and recommendations and recommendations.performed and recommendations.products_count > 0 -%}
    {% render 'recs-grid-inner', products: recommendations.products, limit: prod_limit, section_id: section.id %}
  {%- endif -%}
</div>

{%- comment -%}
  Server-rendered fallback collection (used when: not on product page OR recommendations empty)
{%- endcomment -%}
<div id="recs-fallback-{{ section.id }}" style="display:none">
  {%- if fallback_collection and fallback_collection.products_count > 0 -%}
    {% render 'recs-grid-inner', products: fallback_collection.products, limit: prod_limit, section_id: section.id %}
  {%- endif -%}
</div>

{%- comment -%}
  Shared markup partial for grid/slider. Using standard <img src> (no lazyload dependency).
{%- endcomment -%}
{% comment %} ---- snippets/recs-grid-inner.liquid (inline) ---- {% endcomment %}
{% capture __recs_grid_inner %}
  <div class="swiper-container dT_VProdRecommendations">
    <ul class="swiper-wrapper">
      {%- for product in products limit: limit -%}
        {%- assign this_variant = product.selected_or_first_available_variant -%}
        {%- assign on_sale = false -%}
        {%- if this_variant.compare_at_price and this_variant.compare_at_price > this_variant.price -%}
          {%- assign on_sale = true -%}
        {%- endif -%}
        {%- assign sale_text = 'products.product.sale' | t -%}
        {%- assign sold_out_text = 'products.product.sold_out' | t -%}

        <li class="swiper-slide grid-item product-grid-item{% if on_sale %} on-sale{% endif %}{% if product.available == false %} sold-out{% endif %}" id="product-{{ product.id }}">
          <div class="products">
            <div class="product-container">
              {% render 'new-label', product: product %}
              {% if settings.enable_timer %}{% render 'deal-snippet', productID: product.id, product: product %}{% endif %}

              <a href="{{ product.url }}" class="grid-link product-group" aria-label="{{ product.title | escape }}">
                {% if on_sale and settings.collections_show_sale_circle %}
                  <div class="featured-tag">
                    <span class="badge badge--sale"><span class="gift-tag badge__text{% if sale_text.size > 7 %} badge__text--small{% endif %}">{{ sale_text }}</span></span>
                  </div>
                {% endif %}

                {% if settings.collections_show_sold_out_circle and product.available == false %}
                  <span class="badge badge--sold-out"><span class="badge__text{% if sold_out_text.size > 9 %} badge__text--small{% endif %}">{{ sold_out_text }}</span></span>
                {% endif %}

                <div class="image_group">
                  <div class="ImageOverlayCa"></div>
                  {% liquid
                    assign img_main = product.featured_image | image_url: width: 640
                    assign img_alt = product.featured_image.alt | default: product.title
                  %}
                  {% if settings.secondary_image_use and product.images.size > 1 %}
                    {% assign img_second = product.images.last | image_url: width: 640 %}
                    <div class="reveal">
                      <span class="product-additional">
                        <img loading="lazy" src="{{ img_main }}" class="featured-image teaser" alt="{{ img_alt | escape }}">
                      </span>
                      <img loading="lazy" src="{{ img_second }}" class="hidden-feature_img teaser" alt="{{ product.images.last.alt | default: product.title | escape }}">
                    </div>
                  {% else %}
                    <img loading="lazy" src="{{ img_main }}" class="featured-image teaser" alt="{{ img_alt | escape }}">
                  {% endif %}
                </div>
              </a>

              <div class="product_right_tag{% if on_sale %} offer_exist{% endif %}">
                {% if on_sale %}{% render 'offer-price', product: product %}{% endif %}
              </div>

              <div class="ImageWrapper">
                <div class="product-button dt-sc_{{ settings.product_button_style }} {{ settings.icon_alignment }}">
                  {% if settings.product_button_style == 'icon' and settings.enable_add_cart and product.available %}
                    {% form 'product', product %}
                      <input type="hidden" name="id" value="{{ this_variant.id }}">
                      <button type="submit" class="dT_AddToCart btn" aria-label="{{ 'products.product.add_to_cart' | t }}"></button>
                    {% endform %}
                  {% endif %}

                  {% if settings.enable_compare %}
                    <div><dtx-compare><a href="javascript:void(0);" class="add-compare" data-product_handle="{{ product.handle }}" aria-label="Compare {{ product.title | escape }}"></a></dtx-compare></div>
                  {% endif %}

                  {% if settings.enable_wishlist %}
                    {%- render 'button-wishlist', product: product -%}
                  {% endif %}

                  {% if settings.enable_quick_view %}
                    <div><a class="product-thumb-full-quick-view popup-product quick-view-btn dt-sc-btn" href="{{ product.url }}" data-product-id="{{ product.id }}" data-slider-type="slider_gallery" data-effect="mfp-move-from-top" aria-label="Quick view {{ product.title | escape }}"></a></div>
                  {% endif %}
                </div>
              </div>
            </div>

            <div class="product-detail {{ settings.item_aignment }}">
              {% if settings.display_vendor %}<p class="product-vendor"><span>{{ product.vendor }}</span></p>{% endif %}
              <h3 class="grid-link__title"><a href="{{ product.url }}">{{ product.title }}<span class="choosen-swatch"></span></a></h3>

              {% if settings.product_button_style == 'icon' %}{% render 'variant-tag-color', product: product %}{% endif %}

              {% if settings.truncated_description %}
                <div class="product_desc grid_list">{{ product.description | strip_html | truncatewords: settings.excerpt_count }}</div>
              {% endif %}

              <div class="grid-link__meta">{% render 'product-price', product: product %}</div>

              {% if settings.product_review %}
                <span class="shopify-product-reviews-badge spr-badge" data-id="{{ product.id }}"></span>
              {% endif %}
            </div>
          </div>
        </li>
      {%- endfor -%}
    </ul>

    <div class="swiper-button-prev"></div>
    <div class="swiper-button-next"></div>
  </div>
{% endcapture %}
{% assign _ = __recs_grid_inner %}

{%- comment -%}
  Tiny “include-like” renderer for the captured snippet above.
  Usage: {% render 'recs-grid-inner', products: ..., limit: ..., section_id: ... %}
{%- endcomment -%}
{% comment %} ---- end inline snippet ---- {% endcomment %}

{% schema %}
{
  "name": "Prod grid / Recos",
  "tag": "section",
  "class": "section product-recommendations-section",
  "templates": ["product", "index", "collection", "page"],
  "settings": [
    { "type": "select",
      "id": "mode",
      "label": "Mode",
      "default": "recommendations",
      "options": [
        { "value": "recommendations", "label": "Shopify recommendations (product pages)" },
        { "value": "collection", "label": "Manual collection" }
      ]
    },
    { "type": "collection", "id": "collection", "label": "Collection (Mode = Collection)" },
    { "type": "collection", "id": "fallback_collection", "label": "Fallback collection (used when no product context or no recs)" },
    {
      "type": "range", "id": "products_limit", "min": 2, "max": 12, "step": 1,
      "label": "Products to show", "default": 4
    },
    { "type": "text", "id": "heading", "label": "Heading", "default": "Recommended products" },
    {
      "type": "select",
      "id": "heading_position",
      "label": "Heading Position",
      "default": "text-center",
      "options": [
        { "value": "text-center", "label": "Center" },
        { "value": "text-start", "label": "Left" },
        { "value": "text-end", "label": "Right" }
      ]
    },
    { "type": "checkbox", "id": "full", "label": "Show Full width", "default": false },
    { "type": "checkbox", "id": "spacing_both_ends", "label": "Enable Right & Left Spacing (Works only on Fullwidth)", "default": false },
    { "type": "text", "id": "padding", "label": "Style value (Padding)", "default":"0,0", "info":"Top(px),Bottom(px)" },
    { "type": "text", "id": "margin", "label": "Style value (Margin)", "default":"0,0", "info":"Top(px),Bottom(px)" }
  ],
  "presets": [{ "name": "Prod grid / Recos" }]
}
{% endschema %}

{% javascript %}{% endjavascript %}

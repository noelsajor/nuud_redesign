<!-- FAQ Section -->
<section class="faq-section {{ 'faq-root-' | append: section.id | replace: '_', '' | downcase }}"
         role="region"
         aria-labelledby="faq-title-{{ section.id | replace: '_', '' | downcase }}"
         style="
           {% if section.settings.section_background_image %}
             background-image: url('{{ section.settings.section_background_image | image_url: width: 2000 }}');
             background-size: cover;
             background-position: center;
             background-repeat: no-repeat;
           {% else %}
             background: {{ section.settings.section_background_color }};
           {% endif %}
           padding: 60px {{ settings.gutter_width }}px 60px {{ settings.gutter_width }}px;
         ">

  {%- assign faq_uid = section.id | replace: '_', '' | downcase -%}

  {%- comment -%} Parse per-corner border radius CSV (tl,tr,br,bl) {%- endcomment -%}
  {%- assign br_vals = section.settings.question_border_radius_custom | split: ',' -%}
  {%- assign top_left     = br_vals[0] | default: '6' | strip -%}
  {%- assign top_right    = br_vals[1] | default: top_left  | strip -%}
  {%- assign bottom_right = br_vals[2] | default: top_left  | strip -%}
  {%- assign bottom_left  = br_vals[3] | default: top_right | strip -%}

  {% if section.settings.section_background_image and section.settings.overlay_opacity > 0 %}
    <div class="faq-section-overlay-{{ faq_uid }}"
         aria-hidden="true"
         style="position:absolute; inset:0; background-color: {{ section.settings.overlay_color }}; opacity: {{ section.settings.overlay_opacity | divided_by: 100.0 }}; pointer-events:none;">
    </div>
  {% endif %}

  <faq-section-{{ faq_uid }}
      class="faq-container-{{ faq_uid }}"
      style="
        max-width: {{ settings.container_width }}px;
        margin: 0 auto;
        padding-top: {{ section.settings.section_padding }}px;
        padding-bottom: {{ section.settings.section_padding }}px;
        {% if section.settings.container_background_image %}
          background-image: url('{{ section.settings.container_background_image | image_url: width: 1500 }}');
          background-size: cover; background-position: center; background-repeat: no-repeat;
        {% else %}
          background-color: {{ section.settings.background_color }};
        {% endif %}
        border-radius: {{ section.settings.border_radius }}px;
      ">

    <!-- Left Column -->
    <div class="faq-content-{{ faq_uid }}">
      {% if section.settings.subheading != blank %}
        <p class="faq-subheading-{{ faq_uid }}"
           style="color: {{ section.settings.subheading_color }}; font-size: {{ section.settings.subheading_size }}px;">
          {{ section.settings.subheading }}
        </p>
      {% endif %}

      {% if section.settings.heading != blank %}
        <h2 id="faq-title-{{ faq_uid }}"
            class="faq-heading-{{ faq_uid }}"
            style="color: {{ section.settings.heading_color }}; font-size: {{ section.settings.heading_size }}px;">
          {{ section.settings.heading }}
        </h2>
      {% else %}
        <h2 id="faq-title-{{ faq_uid }}" class="sr-only">Frequently Asked Questions</h2>
      {% endif %}

      {% if section.settings.body != blank %}
        <div class="faq-body-{{ faq_uid }}"
             style="color: {{ section.settings.body_color }}; font-size: {{ section.settings.body_size }}px;">
          {{ section.settings.body }}
        </div>
      {% endif %}
    </div>

    <!-- Right Column: Questions -->
    <ul class="faq-questions-{{ faq_uid }}" role="list">
      {% for i in (1..6) %}
        {% assign q_key = 'question_' | append: i %}
        {% assign a_key = 'answer_'   | append: i %}
        {% assign q = section.settings[q_key] %}
        {% assign a = section.settings[a_key] %}
        {% if q != blank and a != blank %}
          <li class="faq-item-{{ faq_uid }}"
              data-faq-item="{{ i }}"
              style="
                border: 1px solid {{ section.settings.question_border_color }};
                border-radius: {{ top_left }}px {{ top_right }}px {{ bottom_right }}px {{ bottom_left }}px;
                background-color: {{ section.settings.question_background }};
                background-clip: padding-box;
              ">
            <button class="faq-question-button-{{ faq_uid }}"
                    type="button"
                    aria-expanded="false"
                    aria-controls="faq-answer-{{ faq_uid }}-{{ i }}"
                    id="faq-question-{{ faq_uid }}-{{ i }}"
                    style="
                      color: {{ section.settings.question_color }};
                      font-size: {{ section.settings.question_size }}px;
                      padding: {{ section.settings.question_padding }}px;
                    ">
              <span class="faq-question-text-{{ faq_uid }}">{{ q }}</span>
              <svg class="faq-icon-{{ faq_uid }}"
                   viewBox="0 0 24 24"
                   fill="none" stroke="currentColor" stroke-width="2"
                   aria-hidden="true" focusable="false">
                <polyline points="6,9 12,15 18,9"></polyline>
              </svg>
            </button>

            <div class="faq-answer-{{ faq_uid }}"
                 id="faq-answer-{{ faq_uid }}-{{ i }}"
                 role="region"
                 aria-labelledby="faq-question-{{ faq_uid }}-{{ i }}"
                 aria-hidden="true"
                 hidden
                 style="background-color: {{ section.settings.answer_background }};">
              <div class="faq-answer-content-{{ faq_uid }}"
                   style="
                     color: {{ section.settings.answer_color }};
                     font-size: {{ section.settings.answer_size }}px;
                     padding: {{ section.settings.answer_padding }}px;
                   ">
                {{ a }}
              </div>
            </div>
          </li>
        {% endif %}
      {% endfor %}
    </ul>
  </faq-section-{{ faq_uid }}>
</section>

<style>
.faq-section { position: relative; z-index: 1; }
.faq-container-{{ faq_uid }}{
  position: relative; z-index: 2;
  display: grid; grid-template-columns: 1fr 1fr;
  gap: {{ section.settings.section_gap }}px;
  padding-left: {{ settings.gutter_width }}px;
  padding-right: {{ settings.gutter_width }}px;
}
.faq-content-{{ faq_uid }}{ display:flex; flex-direction:column; gap:16px; }
.faq-questions-{{ faq_uid }}{
  display:flex; flex-direction:column;
  gap: {{ section.settings.question_gap }}px;
  list-style:none; margin:0; padding:0;
}

/* Button layout: space between, text grows, icon pinned right */
.faq-question-button-{{ faq_uid }}{
  width:100%; background:transparent; border:0; text-align:left;
  display:flex; justify-content: space-between; align-items:center; gap:1rem;
  line-height:1.4; font-weight:700; cursor:pointer;
  border-color: transparent !important;
  background-clip: padding-box;
  margin-top: 0 !important;
  border-radius: {{ top_left }}px {{ top_right }}px {{ bottom_right }}px {{ bottom_left }}px;
  transition: background-color .2s ease, color .2s ease;
}
.faq-question-text-{{ faq_uid }}{ flex: 1 1 auto; min-width: 0; }
.faq-icon-{{ faq_uid }}{ flex: 0 0 auto; margin-left: auto; width:20px; height:20px; transition: transform .25s ease, color .2s ease; color: {{ section.settings.icon_color }}; }
.faq-item-{{ faq_uid }}.active .faq-icon-{{ faq_uid }}{ transform: rotate(180deg); }

.faq-question-button-{{ faq_uid }}:focus-visible{
  outline: 2px solid rgba(0,0,0,.6);
  outline-offset: 2px;
  border-radius: {{ top_left }}px {{ top_right }}px {{ bottom_right }}px {{ bottom_left }}px;
}

/* ====== Hover + Active styles — BUTTON ONLY stays #ff679a ====== */
{% if section.settings.enable_hover_color %}
/* Hover: only the button changes */
.faq-item-{{ faq_uid }}:hover .faq-question-button-{{ faq_uid }}{
  background-color: #ff679a !important;
  color: {{ section.settings.active_text_color }} !important;
}
.faq-item-{{ faq_uid }}:hover .faq-icon-{{ faq_uid }}{
  color: {{ section.settings.active_text_color }} !important;
}
{% endif %}

/* Active (open): keep the same #ff679a on the button only */
.faq-item-{{ faq_uid }}.active .faq-question-button-{{ faq_uid }}{
  background-color: #ff679a !important;
  color: {{ section.settings.active_text_color }} !important;
}
.faq-item-{{ faq_uid }}.active .faq-question-text-{{ faq_uid }},
.faq-item-{{ faq_uid }}.active .faq-icon-{{ faq_uid }}{
  color: {{ section.settings.active_text_color }} !important;
}

/* Do NOT recolor the LI container on hover/active */
.faq-item-{{ faq_uid }}:hover,
.faq-item-{{ faq_uid }}.active{
  background-color: {{ section.settings.question_background }} !important;
  border-color: {{ section.settings.question_border_color }} !important;
}

/* Answer panel — height animation when enabled */
.faq-answer-{{ faq_uid }}{
  overflow: hidden;
  height: 0; /* closed */
}
{% if section.settings.enable_animation %}
.faq-answer-{{ faq_uid }}{ transition: height .25s ease; }
@media (prefers-reduced-motion: reduce){
  .faq-answer-{{ faq_uid }}, .faq-icon-{{ faq_uid }}{ transition: none !important; }
}
{% endif %}

/* Responsive */
@media screen and (max-width: {{ settings.lap_container_width }}px){
  .faq-container-{{ faq_uid }}{ max-width: {{ settings.lap_container_width }}px; }
}
@media screen and (max-width: {{ settings.tab_container_width }}px){
  .faq-container-{{ faq_uid }}{
    max-width: {{ settings.tab_container_width }}px;
    padding-left: calc({{ settings.gutter_width }}px * .8);
    padding-right: calc({{ settings.gutter_width }}px * .8);
  }
}
@media (max-width: 768px){
  .faq-container-{{ faq_uid }}{
    grid-template-columns: 1fr;
    gap: {{ section.settings.mobile_gap }}px;
    padding-top: calc({{ section.settings.section_padding }}px * .8);
    padding-bottom: calc({{ section.settings.section_padding }}px * .8);
    padding-left: calc({{ settings.gutter_width }}px * .6);
    padding-right: calc({{ settings.gutter_width }}px * .6);
  }
  .faq-content-{{ faq_uid }}{ text-align: {{ section.settings.mobile_text_alignment }}; }
  .faq-subheading-{{ faq_uid }}{ font-size: calc({{ section.settings.subheading_size }}px * .9); }
  .faq-heading-{{ faq_uid }}{ font-size: calc({{ section.settings.heading_size }}px * .85); }
  .faq-body-{{ faq_uid }}{ font-size: calc({{ section.settings.body_size }}px * .95); }
  .faq-question-button-{{ faq_uid }}{
    padding: calc({{ section.settings.question_padding }}px * .85);
    font-size: calc({{ section.settings.question_size }}px * .95);
  }
  .faq-answer-content-{{ faq_uid }}{
    padding: calc({{ section.settings.answer_padding }}px * .85);
    font-size: calc({{ section.settings.answer_size }}px * .95);
  }
}
/* SR-only utility */
.sr-only{ position:absolute; width:1px; height:1px; padding:0; margin:-1px; overflow:hidden; clip:rect(0,0,0,0); white-space:nowrap; border:0; }
</style>

<!-- Guarded script + smooth height animation (toggleable) -->
<script>
  (function() {
    const tagName = 'faq-section-{{ section.id | replace: "_", "" | downcase }}';
    const ANIM_ENABLED = {{ section.settings.enable_animation | json }};
    const RESPECTS_REDUCED = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;

    if (!customElements.get(tagName)) {
      class FaqSectionElement extends HTMLElement {
        connectedCallback(){ this._bind(); }

        _bind(){
          const rootId = '{{ section.id | replace: "_", "" | downcase }}';
          const items = this.querySelectorAll('.faq-item-' + rootId);
          const shouldAnimate = ANIM_ENABLED && !RESPECTS_REDUCED;

          items.forEach(item => {
            const btn   = item.querySelector('.faq-question-button-' + rootId);
            const panel = item.querySelector('.faq-answer-' + rootId);
            if (!btn || !panel) return;

            // closed baseline
            panel.hidden = panel.getAttribute('aria-hidden') !== 'false';
            if (panel.hidden) panel.style.height = '0px';

            btn.addEventListener('click', () => {
              const isOpen = item.classList.contains('active');
              if (isOpen) {
                this._close(item, btn, panel, shouldAnimate);
              } else {
                this._open(item, btn, panel, shouldAnimate);
              }
            });
          });
        }

        _open(item, btn, panel, animate){
          item.classList.add('active');
          btn.setAttribute('aria-expanded','true');
          panel.removeAttribute('hidden');
          panel.setAttribute('aria-hidden','false');

          if (!animate) {
            panel.style.height = 'auto';
            return;
          }
          panel.style.height = '0px';
          panel.offsetHeight; // reflow
          panel.style.height = panel.scrollHeight + 'px';

          const onEnd = (e) => {
            if (e.propertyName !== 'height') return;
            panel.style.height = 'auto';
            panel.removeEventListener('transitionend', onEnd);
          };
          panel.addEventListener('transitionend', onEnd);
        }

        _close(item, btn, panel, animate){
          item.classList.remove('active');
          btn.setAttribute('aria-expanded','false');
          panel.setAttribute('aria-hidden','true');

          if (!animate) {
            panel.style.height = '0px';
            panel.setAttribute('hidden','');
            return;
          }
          panel.style.height = panel.scrollHeight + 'px';
          panel.offsetHeight; // reflow
          panel.style.height = '0px';

          const onEnd = (e) => {
            if (e.propertyName !== 'height') return;
            panel.setAttribute('hidden','');
            panel.removeEventListener('transitionend', onEnd);
          };
          panel.addEventListener('transitionend', onEnd);
        }
      }
      customElements.define(tagName, FaqSectionElement);
    }
  })();
</script>

{% schema %}
{
  "name": "FAQ section (A11y + SEO)",
  "settings": [
    { "type": "header", "content": "Content" },
    { "type": "text", "id": "subheading", "label": "Subheading", "default": "FAQ" },
    { "type": "text", "id": "heading", "label": "Heading", "default": "Frequently Asked Questions" },
    { "type": "richtext", "id": "body", "label": "Body text", "default": "<p>Find answers to the most common questions about our products and services.</p>" },

    { "type": "header", "content": "Questions" },
    { "type": "text", "id": "question_1", "label": "Question 1", "default": "What is your return policy?" },
    { "type": "richtext", "id": "answer_1", "label": "Answer 1", "default": "<p>We offer a 30-day return policy for all unused items in their original packaging.</p>" },
    { "type": "text", "id": "question_2", "label": "Question 2", "default": "How long does shipping take?" },
    { "type": "richtext", "id": "answer_2", "label": "Answer 2", "default": "<p>Standard shipping takes 3-5 business days. Express shipping is available for 1-2 business days.</p>" },
    { "type": "text", "id": "question_3", "label": "Question 3", "default": "Do you offer international shipping?" },
    { "type": "richtext", "id": "answer_3", "label": "Answer 3", "default": "<p>Yes, we ship to most countries worldwide. Shipping costs and delivery times vary by location.</p>" },
    { "type": "text", "id": "question_4", "label": "Question 4" },
    { "type": "richtext", "id": "answer_4", "label": "Answer 4" },
    { "type": "text", "id": "question_5", "label": "Question 5" },
    { "type": "richtext", "id": "answer_5", "label": "Answer 5" },
    { "type": "text", "id": "question_6", "label": "Question 6" },
    { "type": "richtext", "id": "answer_6", "label": "Answer 6" },

    { "type": "header", "content": "Section background" },
    { "type": "image_picker", "id": "section_background_image", "label": "Background image" },
    { "type": "color", "id": "section_background_color", "label": "Background color", "default": "#f8f8f8" },
    { "type": "color", "id": "overlay_color", "label": "Overlay color", "default": "#000000" },
    { "type": "range", "id": "overlay_opacity", "label": "Overlay opacity", "min": 0, "max": 80, "step": 5, "unit": "%", "default": 0 },

    { "type": "header", "content": "Container background" },
    { "type": "image_picker", "id": "container_background_image", "label": "Container background image" },
    { "type": "color", "id": "background_color", "label": "Container background color", "default": "#ffffff" },

    { "type": "header", "content": "Layout" },
    { "type": "range", "id": "section_padding", "label": "Section padding", "min": 20, "max": 80, "step": 5, "unit": "px", "default": 40 },
    { "type": "range", "id": "section_gap", "label": "Gap between content and questions", "min": 20, "max": 80, "step": 5, "unit": "px", "default": 40 },
    { "type": "range", "id": "mobile_gap", "label": "Mobile gap", "min": 15, "max": 50, "step": 5, "unit": "px", "default": 30 },
    {
      "type": "select",
      "id": "mobile_text_alignment",
      "label": "Mobile text alignment",
      "options": [
        { "value": "left", "label": "Left" },
        { "value": "center", "label": "Center" },
        { "value": "right", "label": "Right" }
      ],
      "default": "left"
    },
    { "type": "range", "id": "question_gap", "label": "Gap between questions", "min": 5, "max": 30, "step": 1, "unit": "px", "default": 12 },
    { "type": "range", "id": "question_padding", "label": "Question padding", "min": 10, "max": 30, "step": 2, "unit": "px", "default": 20 },
    { "type": "range", "id": "answer_padding", "label": "Answer padding", "min": 10, "max": 30, "step": 2, "unit": "px", "default": 20 },
    { "type": "range", "id": "border_radius", "label": "Section border radius", "min": 0, "max": 30, "step": 2, "unit": "px", "default": 8 },

    {
      "type": "text",
      "id": "question_border_radius_custom",
      "label": "Question border radius (tl,tr,br,bl)",
      "default": "6,6,6,6",
      "info": "Enter values separated by commas: top-left, top-right, bottom-right, bottom-left (e.g., 16,8,16,8)"
    },

    { "type": "header", "content": "Colors" },
    { "type": "color", "id": "subheading_color", "label": "Subheading color", "default": "#777777" },
    { "type": "color", "id": "heading_color", "label": "Heading color", "default": "#111111" },
    { "type": "color", "id": "body_color", "label": "Body text color", "default": "#333333" },
    { "type": "color", "id": "question_color", "label": "Question text color", "default": "#000000" },
    { "type": "color", "id": "answer_color", "label": "Answer text color", "default": "#333333" },
    { "type": "color", "id": "question_background", "label": "Question background", "default": "#ffffff" },
    { "type": "color", "id": "answer_background", "label": "Answer background", "default": "#fafafa" },
    { "type": "color", "id": "question_border_color", "label": "Question border color", "default": "#dddddd" },
    { "type": "color", "id": "icon_color", "label": "Icon color", "default": "#333333" },

    { "type": "header", "content": "Typography" },
    { "type": "range", "id": "subheading_size", "label": "Subheading font size", "min": 12, "max": 24, "step": 1, "unit": "px", "default": 16 },
    { "type": "range", "id": "heading_size", "label": "Heading font size", "min": 20, "max": 48, "step": 2, "unit": "px", "default": 32 },
    { "type": "range", "id": "body_size", "label": "Body font size", "min": 14, "max": 20, "step": 1, "unit": "px", "default": 16 },
    { "type": "range", "id": "question_size", "label": "Question font size", "min": 14, "max": 24, "step": 1, "unit": "px", "default": 18 },
    { "type": "range", "id": "answer_size", "label": "Answer font size", "min": 14, "max": 20, "step": 1, "unit": "px", "default": 16 },

    { "type": "header", "content": "Animation" },
    {
      "type": "checkbox",
      "id": "enable_animation",
      "label": "Enable animation",
      "default": true,
      "info": "Smoothly expands/collapses answers. Automatically disabled for users who prefer reduced motion."
    },

    { "type": "header", "content": "States" },
    {
      "type": "checkbox",
      "id": "enable_hover_color",
      "label": "Enable hover color on questions",
      "default": true
    },
    {
      "type": "color",
      "id": "active_background_color",
      "label": "Active/Hover background color (container, unused in this variant)",
      "default": "#111111"
    },
    {
      "type": "color",
      "id": "active_text_color",
      "label": "Active & Hover text/icon color",
      "default": "#ffffff"
    }
  ],
  "presets": [
    { "name": "FAQ Section", "category": "Custom" }
  ]
}
{% endschema %}
